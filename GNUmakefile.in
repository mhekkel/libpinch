# makefile for a gtk interface lib
.PHONY: firstTarget
firstTarget: all

CXX					= @CXX@
CXX					= @CXX@
CXXFLAGS			= @BOOST_CPPFLAGS@ \
					  @CPPFLAGS@ \
					  @CXXFLAGS@ \
					  @CRYPTOPP_CFLAGS@ \
					  @PTHREAD_CFLAGS@
LDFLAGS				= @BOOST_LDFLAGS@ \
					  @LDFLAGS@ \
					  @LIBS@
LIBS				= @PTHREAD_LIBS@ \
					  @BOOST_IOSTREAMS_LIB@ \
					  @BOOST_DATE_TIME_LIB@ \
					  @BOOST_REGEX_LIB@ \
					  @CRYPTOPP_LIBS@ \
					  @LIBS@

prefix				= $(DESTDIR)@prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
includedir			= @includedir@
datarootdir			= @datarootdir@
datadir				= @datadir@
docdir				= @docdir@
pkgconfigdir		= $(libdir)/pkgconfig

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

LIB_NAME			= @PACKAGE_NAME@
LIB_VERSION			= @LIBPINCH_LT_VERSION@
LIB_CURRENT			= @LIBPINCH_LT_CURRENT@
LIB_TARGET			= $(LIB_NAME).la
VERSION             = @LIBPINCH_SEMANTIC_VERSION@
DIST_NAME           = @PACKAGE_NAME@-$(subst :,.,$(VERSION))

# libtool stuff

LIBTOOL_DEPS = @LIBTOOL_DEPS@
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status libtool

LIBTOOL = $(SHELL) @abs_top_builddir@/libtool
CXXCOMPILE = $(LIBTOOL) --silent --tag=CXX --mode=compile $(CXX) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --silent --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -version-info $(LIB_VERSION) -o $@

# main build variables
CXXFLAGS            += -Wall -Wno-multichar -I include

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

# targets

VPATH += src:test

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

OBJECTS = \
	$(OBJDIR)/channel.lo \
	$(OBJDIR)/connection.lo \
	$(OBJDIR)/connection_pool.lo \
	$(OBJDIR)/crypto-engine.lo \
	$(OBJDIR)/debug.lo \
	$(OBJDIR)/error.lo \
	$(OBJDIR)/key_exchange.lo \
	$(OBJDIR)/packet.lo \
	$(OBJDIR)/posix_ssh_agent_impl.lo \
	$(OBJDIR)/proxy_cmd.lo \
	$(OBJDIR)/terminal_channel.lo \
	$(OBJDIR)/ssh_agent.lo \
	$(OBJDIR)/x11_channel.lo

	# $(OBJDIR)/port_forwarding.lo \
	# $(OBJDIR)/sftp_channel.lo \

$(LIB_TARGET): $(OBJECTS)
	$(CXXLINK) -rpath $(libdir) $(OBJECTS) $(LIBS)

.PHONY: lib
lib: $(LIB_TARGET)

.PHONY: all
all: $(LIB_TARGET)

-include $(OBJECTS:%.lo=%.d)

$(OBJECTS:.lo=.d):

$(OBJDIR)/%.lo: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXXCOMPILE) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) $(CXXFLAGS) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

.PHONY: clean
clean:
	rm -rf .libs $(OBJDIR)/* $(LIB_TARGET)
	rm -f $(TESTS:%=test/%-test)

.PHONY: distclean
distclean: clean
	rm -f libtool config.lt
	rm -f config.status config.cache config.log configure.lineno config.status.lineno
	rm -f GNUmakefile

define TEST_template =

-include $$(OBJDIR)/$(1)-test.d

$(1)_OBJECTS = $$(OBJDIR)/$(1)-test.o

test/$(1)-test: $(LIB_TARGET) $$($(1)_OBJECTS)
	@ echo ">>> building $(1)-test"
	$(LIBTOOL) --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$($(1)_OBJECTS) -lpinch -lboost_program_options $(LIBS)

.PHONY: $(1)-test
$(1)-test: test/$(1)-test
	cd test; LD_LIBRARY_PATH=../.libs ./$(1)-test $$($(1)_PARAMS)

endef

TESTS = service unit

$(foreach part,$(TESTS),$(eval $(call TEST_template,$(part))))

.PHONY: test
test: $(TESTS:%=%-test)

HEADERS = \
	channel.hpp \
	config.hpp \
	connection.hpp \
	connection_pool.hpp \
	debug.hpp \
	detail/ssh_agent_impl.hpp \
	error.hpp \
	key_exchange.hpp \
	packet.hpp \
	port_forwarding.hpp \
	proxy_cmd.hpp \
	sftp_channel.hpp \
	ssh_agent.hpp \
	terminal_channel.hpp \
	x11_channel.hpp

.PHONY: install
install: lib
	install -d $(libdir)
	$(LIBTOOL) --mode=install install $(LIB_TARGET) $(libdir)
	install -d $(includedir)/pinch
	for f in $(HEADERS); do install include/pinch/$$f $(includedir)/pinch/$$f; done
	install -d $(pkgconfigdir)
	install -m 644 $(LIB_NAME).pc $(pkgconfigdir)/$(LIB_NAME).pc

dist-clean: clean

.PHONY: dist
dist:
	rm -rf $(DIST_NAME)
	mkdir $(DIST_NAME)
	git archive trunk | tar -x -C $(DIST_NAME)
	tar czf $(DIST_NAME).tgz $(DIST_NAME)
	rm -rf $(DIST_NAME)

FORCE:
